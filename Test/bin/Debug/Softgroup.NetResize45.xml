<?xml version="1.0"?>
<doc>
<assembly>
<name>
Softgroup.NetResize45
</name>
</assembly>
<members>
<member name="F:Softgroup.NetResize.NetResize.ExcludedResizeEnum.erAll">
	<summary>The control and its children is not included in the resize process</summary>
</member><member name="F:Softgroup.NetResize.NetResize.ExcludedResizeEnum.erChildren">
	<summary>The control's children are not included in the resize process</summary>
</member><member name="T:Softgroup.NetResize.NetResize.ExcludedResizeEnum">
	<summary>Enumeration constants of excluded control resize</summary>
</member><member name="F:Softgroup.NetResize.NetResize.ResizeModeEnum.rmStandard">
	<summary>The component use a standard resizing method</summary>
</member><member name="F:Softgroup.NetResize.NetResize.ResizeModeEnum.rmAdvanced">
	<summary>The component uses an advanced resizing method more faster than Standard method</summary>
</member><member name="T:Softgroup.NetResize.NetResize.ResizeModeEnum">
	<summary>Enumeration constants of resizing method used by the component</summary>
</member><member name="E:Softgroup.NetResize.NetResize.AfterControlResize">
	<summary>This event is fired after a control is resized</summary>
	<param name="oControl">Control object that is resized</param>
	<param name="bCtrlResized">Gets True if control is resized (location and size)</param>
	<param name="bFontResized">Gets True if font size of control is resized</param>
</member><member name="E:Softgroup.NetResize.NetResize.AfterFormResize">
	<summary>This event is fired after a Form is resized.</summary>
</member><member name="E:Softgroup.NetResize.NetResize.BeforeControlResize">
	<summary>This event is fired before a control is resized.</summary>
	<remarks>if bFontResize parameter is set to False font size of control will be restored to its original size. To change Font size of control use AfterControlResize or AfterFormResize event.</remarks>
	<param name="oControl">Control that will be resized</param>
	<param name="bCtrlResize">Gets/Sets if controll will be resized (location and sizel</param>
	<param name="bFontResize">Gets/Sets if font size of control will be resized</param>
</member><member name="E:Softgroup.NetResize.NetResize.BeforeFormResize">
	<summary>This event is fired before a Form will be resized.</summary>
</member><member name="M:Softgroup.NetResize.NetResize.#ctor(System.Windows.Forms.Form)">
	<summary>
 This constructor can be used to resize specified Form object at runtime. If you use NetResize at runtime throw code you must create a new instance of the class with this constructor;  usually this is made in the Form_Load event like VB.NET sample code below: 
 <code>	
 Private WithEvents oResize As NetResize</code>
		<para></para>
		<para><c>Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load</c></para>
		<para></para>
		<para></para>
		<code>            Softgroup.NetResize.License.LicenseName = "your license name or company name"
             Softgroup.NetResize.License.LicenseUser = "your license user name or email"
             Softgroup.NetResize.License.LicenseKey = "your license key"</code>
		<para></para>
		<para><c>            oResize = New NetResize(Me)</c></para>
		<para><c>            oResize.OriginalFormClientSize = New Size(1192, 699)</c></para>
		<para></para>
		<para><c>End Sub</c></para>
		<para></para>
		<code>Private Sub Form1_FormClosed(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosedEventArgs) Handles Me.FormClosed
         If Not oResize Is Nothing Then
             oResize.Dispose()
             oResize = Nothing
         End If</code>
		<para></para>
		<para><c>End Sub</c></para>
		<para></para>
		<para>If you don't use NetResize at design time you are responsable to call the Dispose method to free resources allocated by the object.</para>
		<para></para>
	</summary>
	<remarks>
 In situations in which the forms of your application will be designed with resolution larger than desktop resolution of computer where your application will be installed and you create a new instance of the class with this method constructor you must sets the property valoe of OriginalFormClientSize to ClientSize value of your form at design time. Be care to change Location, Size or WindowState properties of Form before create a new instance of NetResize object at runtime with this constructor because changing values of these properties affects ratio calculation and can produce wrong resize of controls. You must also avoid to sets WindowState property at design time to a value other than Normal (Minimized or Maximized). 
 </remarks>
	<param name="oForm">A valid Form object</param>
</member><member name="M:Softgroup.NetResize.NetResize.#ctor(System.Windows.Forms.Form,System.Int32,System.Int32)">
	<summary>
 This constructor can be used to resize specified Form object at runtime. If you use NetResize at runtime throw code you must create a new instance of the class with this constructor;  usually this is made in the Form_Load event like VB.NET sample code below: 
 <code>	
 Private WithEvents oResize As NetResize</code>
		<para></para>
		<para><c>Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load</c></para>
		<para></para>
		<para></para>
		<code>            Softgroup.NetResize.License.LicenseName = "your license name or company name"
             Softgroup.NetResize.License.LicenseUser = "your license user name or email"
             Softgroup.NetResize.License.LicenseKey = "your license key"</code>
		<para></para>
		<para><c>            oResize = New NetResize(Me)</c></para>
		<para><c>            oResize.OriginalFormClientSize = New Size(1192, 699)</c></para>
		<para></para>
		<para><c>End Sub</c></para>
		<para></para>
		<code>Private Sub Form1_FormClosed(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosedEventArgs) Handles Me.FormClosed
         If Not oResize Is Nothing Then
             oResize.Dispose()
             oResize = Nothing
         End If</code>
		<para></para>
		<para><c>End Sub</c></para>
		<para></para>
		<para>If you don't use NetResize at design time you are responsable to call the Dispose method to free resources allocated by the object.</para>
		<para></para>
	</summary>
	<remarks>
 In situations in which the forms of your application will be designed with resolution larger than desktop resolution of computer where your application will be installed and you create a new instance of the class with this method constructor you must sets the property valoe of OriginalFormClientSize to ClientSize value of your form at design time. Be care to change Location, Size or WindowState properties of Form before create a new instance of NetResize object at runtime with this constructor because changing values of these properties affects ratio calculation and can produce wrong resize of controls. You must also avoid to sets WindowState property at design time to a value other than Normal (Minimized or Maximized). 
 </remarks>
	<param name="oForm">A System.Windows.Forms.Form Form object</param>
	<param name="iWidth">Initial form Width</param>
	<param name="iHeight">Initial form Height</param>
</member><member name="M:Softgroup.NetResize.NetResize.CanExtend(System.Object)">
	<summary>This method is used only for internally</summary>
</member><member name="M:Softgroup.NetResize.NetResize.GetResizeChildren(System.Windows.Forms.Control)">
	<summary>Gets if children of specified control can be resized.</summary>
</member><member name="M:Softgroup.NetResize.NetResize.GetResizeControl(System.Windows.Forms.Control)">
	<summary>Gets if specified control can be resized.</summary>
</member><member name="M:Softgroup.NetResize.NetResize.GetResizeFont(System.Windows.Forms.Control)">
	<summary>Gets if font of specified control can be resized.</summary>
</member><member name="M:Softgroup.NetResize.NetResize.GetResizeTextBoxMultiline(System.Windows.Forms.TextBox)">
	<summary>Gets/Sets if TextBox control multiline text is allowed.</summary>
</member><member name="M:Softgroup.NetResize.NetResize.AddControlPropertyFont(System.Object,System.String)">
	<summary>This method can be used to add automatic font resize of controls properties other than standard "Font" property.</summary>
	<remarks>For example to add automatic font resize to the first node of a TreeView  control you can add this code: 
 <para></para>
		<code>
 Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
 <para></para>
 	
 	Me.NetResize1.AddControlPropertyFont(Me.TreeView1, "Nodes(0).NodeFont")
 
 <para></para>
 End Sub
 </code></remarks>
	<param name="oControl">A valid control or object that contains a Font property</param>
	<param name="sPropertyName">A string value that rappresent a valid reference to a font property name of control of type System.Drawing.Font</param>
</member><member name="M:Softgroup.NetResize.NetResize.AddControlPropertyHeight(System.Object,System.String)">
	<summary>This method can be used to add automatic vertical resize of controls properties other than standard "Height" property.</summary>
	<remarks>For example with this code you can add automatic resize of columns headers height of a DataGridView control: 
 <para></para>
		<code>Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
 <para></para>
 	Me.DataGridView1.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.DisableResizing
 	Me.NetResize1.AddControlPropertyHeight(Me.DataGridView1, "ColumnHeadersHeight")
 <para></para>
 End Sub</code></remarks>
	<param name="oControl">A valid control object</param>
	<param name="sPropertyName">A string value that rappresent a valid reference to a property name of control that contains a vertical rappresentation of a height value</param>
</member><member name="M:Softgroup.NetResize.NetResize.AddControlPropertyWidth(System.Object,System.String)">
	<summary>This method can be used to add automatic horizontal resize of controls properties other than standard "Width" property.</summary>
	<remarks>For example with this code you can add automatic resize of first column header width of a ListView control: 
 <para></para>
		<code>
 Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
 <para></para>
  	Me.NetResize1.AddControlPropertyWidth(Me.ListView1, "Columns(0).Width")
 <para></para>
 End Sub
 </code></remarks>
	<param name="oControl">A valid control object</param>
	<param name="sPropertyName">A string value that rappresent a valid reference to a property name of control that contains a horizontal rappresentation of a width value</param>
</member><member name="M:Softgroup.NetResize.NetResize.FontScaleShowDialog">
	<summary>Display the Font Scale Adjust dialog.</summary>
	<remarks>The Font Scale Dialog allows user to adjust font size scale percentage for controls of form where NetResize is placed.</remarks>
</member><member name="M:Softgroup.NetResize.NetResize.FormCenter">
	<summary>Center the attached Form over the Desktop or MDI Parent</summary>
</member><member name="M:Softgroup.NetResize.NetResize.FormFadeIn">
	<summary>Display and fade form into view.</summary>
</member><member name="M:Softgroup.NetResize.NetResize.FormFadeOut">
	<summary>Hide and fade form out of view.</summary>
</member><member name="M:Softgroup.NetResize.NetResize.FormRestore">
	<summary>Restore the original posizion, size and window state of the attached Form</summary>
</member><member name="M:Softgroup.NetResize.NetResize.LayoutRestore">
	<summary>Restore state, position and size of form previously saved with LayoutSave method</summary>
</member><member name="M:Softgroup.NetResize.NetResize.LayoutSave">
	<summary>Save the actual form window state, position and size of form to be restored with the LayoutRestore method.</summary>
</member><member name="M:Softgroup.NetResize.NetResize.Refresh">
	<summary>Force a resize refresh of controls in the form</summary>
</member><member name="M:Softgroup.NetResize.NetResize.SetResizeChildren(System.Windows.Forms.Control,System.Boolean)">
	<summary>This method is for internal use only</summary>
</member><member name="M:Softgroup.NetResize.NetResize.SetResizeControl(System.Windows.Forms.Control,System.Boolean)">
	<summary>This method is for internal use only</summary>
</member><member name="M:Softgroup.NetResize.NetResize.SetResizeFont(System.Windows.Forms.Control,System.Boolean)">
	<summary>This method is for internal use only</summary>
</member><member name="M:Softgroup.NetResize.NetResize.SetResizeTextBoxMultiline(System.Windows.Forms.Control,System.Boolean)">
	<summary>This method is for internal use only</summary>
</member><member name="M:Softgroup.NetResize.NetResize.ShowForm(System.Windows.Forms.Form)">
	<summary>Show specified Form. If Form is an MDI Child this method reduce flickering effects on MDI environtment.</summary>
	<param name="oForm">A Form object</param>
</member><member name="P:Softgroup.NetResize.NetResize.AutoSaveLayout">
	<summary>Gets/Sets automatic save and restore of form state and position</summary>
</member><member name="P:Softgroup.NetResize.NetResize.CurrentRatioFont">
	<summary>Gets the current ratio resolution used to resize Font of controls</summary>
</member><member name="P:Softgroup.NetResize.NetResize.CurrentRatioHeight">
	<summary>Gets the current vertical ratio resolution used to resize Height of controls</summary>
</member><member name="P:Softgroup.NetResize.NetResize.CurrentRatioWidth">
	<summary>Gets the current horizontal ratio resolution used to resize Widht of controls</summary>
</member><member name="P:Softgroup.NetResize.NetResize.DataGridViewAutoResize">
	<summary>Gets/Sets if NetResize control apply font resize to DataGridView controls and call automatically AutoResizeRows and AutoResizeColumnHeadersHeight methods of control when resized.</summary>
	<remarks>AutoResizeRows and AutoResizeColumnHeadersHeight methods of DataGridView control will be called only if DataGridViewAutoResize property of NetResize control is set to True or resize of font for control is enabled through code (by default font resize is enabled if DataGridViewAutoResize  is set to True otherwise font resize for control is disabled that is default behavior)</remarks>
</member><member name="P:Softgroup.NetResize.NetResize.DataGridViewAutoResizeCols">
	<summary>Gets/Sets how NetResize must adjusts the width of all columns to fit the contents of their cells when DataGridView control will resized</summary>
	<remarks>This feature will be enabled only when DataGridViewAutoResize is sets to True</remarks>
</member><member name="P:Softgroup.NetResize.NetResize.DataGridViewAutoResizeHeaders">
	<summary>Gets/Sets if NetResize must adjusts the height of the column headers to fit the header contents when DataGridView control will resized</summary>
	<remarks>This feature will be enabled only when DataGridViewAutoResize is sets to True</remarks>
</member><member name="P:Softgroup.NetResize.NetResize.DataGridViewAutoResizeRows">
	<summary>Gets/Sets how NetResize must adjusts the heights of some or all rows to fit their contents when DataGridView control will resized</summary>
	<remarks>This feature will be enabled only when DataGridViewAutoResize is sets to True</remarks>
</member><member name="P:Softgroup.NetResize.NetResize.DPIAutoResize">
	<summary>Gets/Sets if font size will be scaled when run-time DPI resolution is different from design-time DPI resolution (DPIDesignValue property).</summary>
	<remarks>If DPIAutoResize property will be sets to True and run-time DPI resolution is different from design-time DPI resolution (DPIDesignValue property), font resize ratio will be scaled (increased or reduced) proportionally. For example if you desing a form with a standard DPI resolution of 96 when application run on a system with DPI resolution sets to 120 font resize ratio will be reduced of 25%.</remarks>
</member><member name="P:Softgroup.NetResize.NetResize.DPIDesignValue">
	<summary>Gets/Sets Design-Time DPI resolution.</summary>
	<remarks>Value of this property will be ingored if DPIAutoResize is sets to False (see DPIAutoResize property for more details). This property is available only at design-time.</remarks>
</member><member name="P:Softgroup.NetResize.NetResize.DPIFontFactor">
	<summary>Gets the DPI factor value used to reduce or increase  Font size when DPIAutoReize is enabled.</summary>
</member><member name="P:Softgroup.NetResize.NetResize.Enabled">
	<summary>Gets/Sets if controls resize of the form is enabled</summary>
</member><member name="P:Softgroup.NetResize.NetResize.ExcludedResize(System.Windows.Forms.Control,Softgroup.NetResize.NetResize.ExcludedResizeEnum)">
	<summary>Gets/Sets if specified control is excluded from resize of both size and font</summary>
	<param name="oControl">A valid Control object</param>
	<param name="Children">This parameter specify if control and/or it's children will be excluded (see ExcludedResizeEnum enumeration for details)</param>
</member><member name="P:Softgroup.NetResize.NetResize.ExcludedResizeCtrl(System.Windows.Forms.Control,Softgroup.NetResize.NetResize.ExcludedResizeEnum)">
	<summary>Gets/Sets if specified control is excluded from resize</summary>
	<param name="oControl">A valid Control object</param>
	<param name="Children">This parameter specify if control and/or it's children will be excluded (see ExcludedResizeEnum enumeration for details)</param>
</member><member name="P:Softgroup.NetResize.NetResize.ExcludedResizeFont(System.Windows.Forms.Control,Softgroup.NetResize.NetResize.ExcludedResizeEnum)">
	<summary>Gets/Sets if specified control is excluded from resize of font only</summary>
	<param name="oControl">A valid Control object</param>
	<param name="Children">This parameter specify if control and/or it's children will be excluded (see ExcludedResizeEnum enumeration for details)</param>
</member><member name="P:Softgroup.NetResize.NetResize.FontScaleDialogEnabled">
	<summary>Gets/Sets if Font Scale Dialog must be displayed when user press font scale dialog shortcut keys (see FontScaleShortcutKeys property).</summary>
</member><member name="P:Softgroup.NetResize.NetResize.FontScaleDialogGlassed">
	<summary>Gets/Sets if Font Scale Dialog must be displayed using a glassed effect.</summary>
</member><member name="P:Softgroup.NetResize.NetResize.FontScalePercent">
	<summary>Gets/Sets the percentage of scale to decrease calculated Font size during controls resizing. Default value is 100 (standard Font resize).</summary>
	<remarks>This value can be used to decrease the calculated Font size during controls resizing. This help to improve the appearance of some controls that when resized do not have enough space to display all text.</remarks>
</member><member name="P:Softgroup.NetResize.NetResize.FontScaleSaveRestore">
	<summary>Gets/Sets if Font Scale percent must be saved/restored into registry.</summary>
</member><member name="P:Softgroup.NetResize.NetResize.FontScaleShortcutKeys">
	<summary>Gets/Sets the shortcut keys with witch the user can display Font Scale Dialog.</summary>
	<remarks>The Font Scale Dialog allows user to adjust font size scale percentage for controls of form where NetResize is placed.</remarks>
</member><member name="P:Softgroup.NetResize.NetResize.FormFadeEffect">
	<summary>Enable/Disable Fade In/Out Form effect into view.</summary>
</member><member name="P:Softgroup.NetResize.NetResize.FormFadeSpeed">
	<summary>Gets/Sets interval speed of fadein/fadeout effect in milliseconds. Defaul value is 15.</summary>
</member><member name="P:Softgroup.NetResize.NetResize.GradientEnabled">
	<summary>Enable/Disable background gradient effect of form</summary>
</member><member name="P:Softgroup.NetResize.NetResize.GradientEndColor">
	<summary>Gets/Sets the background gradient end colour of form.</summary>
	<remarks>GradientEnabled property must be sets to True for this value take effect.</remarks>
</member><member name="P:Softgroup.NetResize.NetResize.GradientMode">
	<summary>Gets/Sets background gradient effect direction of form</summary>
	<remarks>GradientEnabled property must be sets to True for this value take effect.</remarks>
</member><member name="P:Softgroup.NetResize.NetResize.GradientStartColor">
	<summary>Gets/Sets the background gradient start colour of form.</summary>
	<remarks>GradientEnabled property must be sets to True for this value take effect.</remarks>
</member><member name="P:Softgroup.NetResize.NetResize.IsDisposed">
	<summary>Return True is NetResize is Disposed</summary>
</member><member name="P:Softgroup.NetResize.NetResize.LabelsAutoEllipse">
	<summary>Gets/Sets if AutoEllipse property of all Labels controls must sets to True when resized.</summary>
</member><member name="P:Softgroup.NetResize.NetResize.MaximumSize">
	<summary>Gets/sets the maximum size the form can be resized to.</summary>
	<remarks>This property enables you to limit the size of a form to a specified maximum size. You can use this feature to prevent a user from sizing a window to an undesirable size. 
 <para>You can set this property to a Size object that is 0 in height and 0 in width to have no mamimum size beyond the limits set by Windows. </para></remarks>
</member><member name="P:Softgroup.NetResize.NetResize.MinimumSize">
	<summary>Gets/Sets the minimum size the form can be resized to.</summary>
	<remarks>This property enables you to limit the size of a form to a specified minimum size. You can use this feature to prevent a user from sizing a window to an undesirable size. 
 <para><b>Softgroup .Net Forms Resize sets this property to the original Width/Height of the form size automatically.</b>
		</para>
		<para>You can set this property to a Size object that is 0 in height and 0 in width to have no minimum size beyond the limits set by Windows. </para></remarks>
</member><member name="P:Softgroup.NetResize.NetResize.OriginalControlLocation(System.Windows.Forms.Control)">
	<summary>Gets the original Location (before any resize occurs) of specified control.</summary>
	<param name="oControl">Control object for which to find original location</param>
	<remarks>If spcified control is not not included in the resize process a System.Drawing.Point.Empty value will be returned.</remarks>
</member><member name="P:Softgroup.NetResize.NetResize.OriginalControlSize(System.Windows.Forms.Control)">
	<summary>Gets the original Size (before any resize occurs) of specified control.</summary>
	<param name="oControl">Control object for which to find original size</param>
	<remarks>If spcified control is not not included in the resize process a System.Drawing.Size.Empty value will be returned.</remarks>
</member><member name="P:Softgroup.NetResize.NetResize.OriginalFormClientRectangle">
	<summary>Gets/Sets the original client rectangle of the Form at runtime</summary>
	<remarks>When a new instance of NetResize will be created at runtime through code (see New constructor) this property must be sets to original ClientRectangle value of form at design time in which situations your application will be installed on computers where desktop size can be smaller than your form original size.</remarks>
</member><member name="P:Softgroup.NetResize.NetResize.OriginalFormHeight">
	<summary>Gets/Sets the original Height of the Form</summary>
</member><member name="P:Softgroup.NetResize.NetResize.OriginalFormLeft">
	<summary>Gets/Sets the original Left position of the Form</summary>
</member><member name="P:Softgroup.NetResize.NetResize.OriginalFormTop">
	<summary>Gets/Sets the original Top position of the Form</summary>
</member><member name="P:Softgroup.NetResize.NetResize.OriginalFormWidth">
	<summary>Gets/Sets the original Width of the Form</summary>
</member><member name="P:Softgroup.NetResize.NetResize.OriginalMinimumSize">
	<summary>Gets/Sets if MinimumSize property of form must be sets to original design time Size. Default value is False.</summary>
	<remarks>In many cases resizing some controls (like RadioButton) to a size minor than original design time size will not keep best aspect. To avoid this you must sets MinimumSize property of form to design time Size.</remarks>
</member><member name="P:Softgroup.NetResize.NetResize.ParentControl">
	<summary>Gets/Sets parent container control. This property is for internal use only. Don't use this property.</summary>
</member><member name="P:Softgroup.NetResize.NetResize.ParentForm">
	<summary>Gets the Form object attached to a NetResize object.</summary>
</member><member name="P:Softgroup.NetResize.NetResize.ResizeFont">
	<summary>Gets/Sets if font resize for the controls is enabled</summary>
</member><member name="P:Softgroup.NetResize.NetResize.ResizeMode">
	<summary>Gets/Sets resizing method used by component. Default is Advanced mode.</summary>
</member><member name="P:Softgroup.NetResize.NetResize.Site">
	<summary>Gets/Ses the ISite of the Component. This property is for internal use only. Don't use this property.</summary>
</member><member name="T:Softgroup.NetResize.NetResize">
	<summary>Softgroup .Net Forms Resize is a fast, small and lightweight .NET component that gives your applications resolution independence. 
 <para></para>
		<para>To add a Softgroup .NetResize to your form simply add the component to the Toolbox window of Microsoft Visual Studio and drag it to the Form.</para>
		<para></para>
		<para>To enter your licenses informations you must set LicenseName, LicenseUser and LicenseKey properties of License object as VB.NET code sample below:</para>
		<para></para>
		<para><c>Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load</c></para>
		<para></para>
		<code>	Softgroup.NetResize.License.LicenseName= "YourCompanyName" 	
 	Softgroup.NetResize.License.LicenseUser = "YourUserNameOrMail"  	
 	Softgroup.NetResize.License.LicenseKey = "YourSerialNumber" 	</code>
		<para></para>
		<para><c>End Sub</c></para>
		<para></para>
		<para>You can alse use Softgroup NetResize at runtime time creating a New instance of the class and setting the ParentForm property  (see ParentForm property documentation for more details)</para></summary>
	<remarks>Softgroup .Net Forms Resize adjust the Top, Left, Height, Width, and Font Size properties of each control on a form. Controls with Dock property value other than DockStyle.None will not be resized (only fonts for this control will be automatically resized) 
 <para>It does not know about other size, position and font size related properties that may be present in more complex controls.</para>
		<para>Otherwise it is possible to change "special" size and position related properties of a control during events generated by the class or using AddControlPropertyFont, AddControlPropertyHeight or AddControlPropertyWith methods.</para>
		<para>You can prevent controls resize and fonts resize throw BeforeControlResize event in any way</para>
		<para>For controls of type MenuStrip, ToolStrip, ToolBar, StatusStrip, StatusBar and BindingNavigator automatic font resize is disabled by default at runtime (if Dock control property has a value other then None) to preserve best form aspect. If you want enable automatic font resize for this controls you can use BeforeControlResize event or AddControlPropertyFont method.</para>
		<para></para>
		<para>Softgroup .NetResize automatically sets Anchor property of each control to None; this is necessary to scale properly form controls location and size. If you sets (through code) Anchor property of any control of a Form controlled by Softgroup .NetResize the control may be badly resized.  </para>
		<para></para>
		<para>Softgroup .NetResize also sets both the MaximumSize and MinimumSize property of form to a value of (0,0) overwriting the original design-time properties values. To enable MinimumSize or MaximumSize properties of form you must sets this properties at runtime throw code setting MinimumSize and / or  MaxmimumSize property of Form or .NetResize control to a desidered value like sample code below:</para>
		<para></para>
		<para><c>Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load</c></para>
		<para></para>
		<code>         Softgroup.NetResize.License.LicenseName= "YourCompanyName" 	
          Softgroup.NetResize.License.LicenseUser = "YourUserNameOrMail"  	
          Softgroup.NetResize.License.LicenseKey = "YourSerialNumber" 	
          Me.NetResize1.MinimumSize = New System.Drawing.Size(100, 100) 	</code>
		<para></para>
		<para><c>End Sub</c></para></remarks>
</member><member name="P:Softgroup.NetResize.My.Resources.Resources.ResourceManager">
	<summary>
  Restituisce l'istanza di ResourceManager nella cache utilizzata da questa classe.
</summary>
</member><member name="P:Softgroup.NetResize.My.Resources.Resources.Culture">
	<summary>
  Esegue l'override della proprietà CurrentUICulture del thread corrente per tutte le
  ricerche di risorse eseguite utilizzando questa classe di risorse fortemente tipizzata.
</summary>
</member><member name="T:Softgroup.NetResize.My.Resources.Resources">
	<summary>
  Classe di risorse fortemente tipizzata per la ricerca di stringhe localizzate e così via.
</summary>
</member><member name="P:Softgroup.NetResize.License.LicenseKey">
	<summary>Gets/Sets the license key for the product</summary>
</member><member name="P:Softgroup.NetResize.License.LicenseName">
	<summary>Gets/Sets the license company name for the product</summary>
</member><member name="P:Softgroup.NetResize.License.LicenseUser">
	<summary>Gets/Sets the license user name (usually and email address) for the product</summary>
</member><member name="T:Softgroup.NetResize.License">
	<summary>License class holds licenses informations data.</summary>
</member>
</members>
</doc>